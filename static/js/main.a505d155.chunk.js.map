{"version":3,"sources":["serviceWorker.js","redux/index.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","store","createStore","count","action","type","subscribe","console","log","getState","mapDispatchToProps","increment","decrement","connect","globalState","props","className","onClick","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCON,IAAMC,EAAQC,aAXd,WAAqC,IAApBC,EAAmB,uDAAX,EAAIC,EAAO,uCACnC,OAAOA,EAAOC,MACb,IAAK,YACJ,OAAOF,EAAQ,EAChB,IAAK,YACJ,OAAOA,EAAQ,EAChB,QACC,OAAOA,MAKVF,EAAMK,WAAU,kBAAKC,QAAQC,IAAIP,EAAMQ,eACxBR,QCAf,IAAMS,EAAqB,CACvBC,UD1BG,WACN,MAAM,CACLN,KAAO,cCyBLO,UDrBG,WACN,MAAM,CACLP,KAAO,eCsBMQ,eAXd,SAAyBC,GACtB,MAAM,CACFX,MAAQW,KASuBJ,EAAxBG,EA3Bf,SAAaE,GACT,OACI,yBAAKC,UAAY,SACb,4BAAMD,EAAMZ,OACZ,4BACIa,UAAY,qCACZC,QAAWF,EAAMH,WAFrB,aAIA,4BACII,UAAY,qCACZC,QAAWF,EAAMJ,WAFrB,iB,MCJZO,IAASC,OACR,kBAAC,IAAD,CAAUlB,MAASA,GAChB,kBAAC,EAAD,OAEFmB,SAASC,eAAe,SHsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.a505d155.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore} from \"redux\"\r\n\r\nexport function increment(){\r\n\treturn{\r\n\t\ttype : \"INCREMENT\"\r\n\t}\r\n}\r\n\r\nexport function decrement(){\r\n\treturn{\r\n\t\ttype : \"DECREMENT\"\r\n\t}\r\n}\r\n\r\nfunction reducer(count = 0 , action){\r\n\tswitch(action.type){\r\n\t\tcase \"INCREMENT\" : \r\n\t\t\treturn count + 1 \r\n\t\tcase \"DECREMENT\" :\r\n\t\t\treturn count - 1\r\n\t\tdefault :\r\n\t\t\treturn count \r\n\t}\r\n}\r\n\r\nconst store = createStore(reducer)\r\nstore.subscribe(()=> console.log(store.getState()))\r\nexport default store","import React from \"react\"\r\nimport {connect} from \"react-redux\"\r\nimport {increment,decrement} from \"./redux\"\r\n\r\n\r\nfunction App(props){\r\n    return(\r\n        <div className = 'f1 tc'>\r\n            <h1 >{props.count}</h1>\r\n            <button \r\n                className = 'b bg-light-green bn f3 ma4 br4 pa4' \r\n                onClick = {props.decrement}> Decrease  \r\n            </button>\r\n            <button \r\n                className = 'b bg-light-green bn f3 ma4 br4 pa4' \r\n                onClick = {props.increment}> Increase  \r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n function mapStateToProps(globalState){\r\n    return{\r\n        count : globalState\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    increment : increment,\r\n    decrement : decrement\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App)\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\"\nimport {Provider} from \"react-redux\"\nimport store from \"./redux\"\nimport \"tachyons\"\n\nReactDOM.render(\n <Provider store = {store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}